{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","background","color","textAlign","padding","TodoItem","getStyle","borderBottom","textDecoration","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","React","App","state","setState","filter","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gNAEe,SAASA,IACpB,OACI,4BAAQC,MAAQC,GACZ,yCAKZ,IAAMA,EAAc,CAChBC,WAAY,OACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QCXPC,E,4MACFC,SAAW,WACP,MAAO,CACHL,WAAY,UACZG,QAAS,OACTG,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAChC,eAAiB,S,uDAIf,IAAD,EAEiBC,KAAKH,MAAMC,KAAzBG,EAFH,EAEGA,GAAIC,EAFP,EAEOA,MAEZ,OACI,yBAAKf,MAAQa,KAAKN,YACd,2BACI,2BAAOS,KAAK,WAAWC,SAAWJ,KAAKH,MAAMQ,aAAaC,KAAKN,KAAMC,KACnEC,EACF,4BAAQK,QAASP,KAAKH,MAAMW,QAAQF,KAAKN,KAAMC,GAAKd,MAAOsB,GAA3D,W,GApBGC,aA+BjBD,EAAW,CACbpB,WAAY,UACZC,MAAO,OACPqB,OAAQ,OACRnB,QAAS,WACToB,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGIrB,ICzBAsB,E,uKAbD,IAAD,OACT,OAAOf,KAAKH,MAAMmB,MAAMC,KAAI,SAACnB,GAAD,OACxB,kBAAC,EAAD,CAAUoB,IAAKpB,EAAKG,GAAIH,KAAMA,EAAMO,aAAe,EAAKR,MAAMQ,aAC9DG,QAAS,EAAKX,MAAMW,iB,GALRW,IAAMT,WCgDXU,G,kNA7CbC,MAAQ,CACNL,MAAO,CACL,CACEf,GAAI,EACJC,MAAO,qBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,cACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,aACPH,WAAW,K,EAKjBM,aAAe,SAACJ,GACd,EAAKqB,SAAS,CAAEN,MAAO,EAAKK,MAAML,MAAMC,KAAI,SAAAnB,GAI1C,OAHGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAIXU,QAAU,SAACP,GACT,EAAKqB,SAAS,CAAEN,MAAM,YAAK,EAAKK,MAAML,MAAMO,QAAO,SAAAzB,GAAI,OAAIA,EAAKG,KAAOA,S,uDAKvE,OADAuB,QAAQC,IAAIzB,KAAKqB,MAAML,OAErB,yBAAKU,UAAU,OACb,kBAACxC,EAAD,MACA,kBAAC,EAAD,CAAO8B,MAAOhB,KAAKqB,MAAML,MAAOX,aAAiBL,KAAKK,aACtDG,QAAWR,KAAKQ,e,GAzCNW,IAAMT,YCOJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.0c0cc317.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={ headerStyle }>\r\n            <h1>TodoList</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ?\r\n            'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() { \r\n\r\n        const { id, title } = this.props.todo;\r\n\r\n        return (\r\n            <div style={ this.getStyle() }>\r\n                <p>\r\n                    <input type='checkbox' onChange={ this.props.markComplete.bind(this, id) }/>\r\n                    { title }\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 10px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n\r\n    render() {\r\n    return this.props.todos.map((todo) => (\r\n        <TodoItem key={todo.id} todo={todo} markComplete={ this.props.markComplete }\r\n        delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport Header from './components/layout/Header';\r\nimport Todos from './components/Todos';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: 1, \r\n        title: 'Take out the trash',\r\n        completed: false\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Fight Kevin',\r\n        completed: false\r\n      },\r\n      {\r\n        id: 3,\r\n        title: 'Be awesome',\r\n        completed: true\r\n      }\r\n    ]\r\n  }\r\n\r\n  markComplete = (id) => {\r\n    this.setState({ todos: this.state.todos.map(todo => {\r\n      if(todo.id === id){\r\n        todo.completed = !todo.completed;\r\n      }\r\n      return todo;\r\n    }) })\r\n  }\r\n\r\n  delTodo = (id) => {\r\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.todos);\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Todos todos={this.state.todos} markComplete = { this.markComplete }\r\n        delTodo = {this.delTodo}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}